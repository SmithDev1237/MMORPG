{
  "name": "pathfinding",
  "version": "0.4.2",
  "description": "Comprehensive pathfinding library for grid based games",
  "homepage": "https://github.com/qiao/PathFinding.js",
  "keywords": [
    "algorithm",
    "game"
  ],
  "author": {
    "name": "Xueqiao Xu",
    "email": "xueqiaoxu@gmail.com"
  },
  "main": "./index.js",
  "dependencies": {},
  "devDependencies": {
    "uglify-js": "2.3.6",
    "colors": "0.6.x",
    "browserify": "2.25.0",
    "mocha": "1.0.x",
    "should": "0.6.x"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/qiao/PathFinding.js.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/mit-license.php"
    }
  ],
  "readme": "PathFinding.js\n==============\n#### A comprehensive path-finding library in javascript. ####\n\nIntroduction\n------------\n\nThe aim of this project is to provide a path-finding library that can be easily incorporated into web games. It may run on Node.js or the browser.\n\nIt comes along with an [online demo](http://qiao.github.com/PathFinding.js/visual) to show how the algorithms execute. (The pathfinding speed is slowed down in the demo)\n\nServer\n------\n\nIf you want to use it in Node.js, you may install it via `npm`.\n\n```bash\nnpm install pathfinding\n```\n\nThen, in your program:\n\n```javascript\nvar PF = require('pathfinding');\n```\n\nNow skip to the `Basic Usage` section of this readme.\n\n\nBrowser\n-------\n\nDownload the [minified js file](https://github.com/qiao/PathFinding.js/raw/master/lib/pathfinding-browser.min.js) and include it in your web page.\n\n```html\n<script type=\"text/javascript\" src=\"./pathfinding-browser.min.js\"></script>\n```\n\nBasic Usage\n-----------\n\nTo build a grid-map of width 5 and height 3:\n\n```javascript\nvar grid = new PF.Grid(5, 3); \n```\n\nBy default, all the nodes in the grid will be able to be walked through.\nTo set whether a node at a given coordinate is walkable or not, use the `setWalkableAt` method.\n\nFor example, to set the node at (0, 1) to be un-walkable, where 0 is the x coordinate (from left to right), and \n1 is the y coordinate (from up to down):\n\n```javascript\ngrid.setWalkableAt(0, 1, false);\n```\n\nYou may also pass in a matrix while instantiating the `PF.Grid` class.\nIt will initiate all the nodes in the grid with the same walkability indicated by the matrix.\n0 for walkable while 1 for blocked.\n\n```javascript\nvar matrix = [\n    [0, 0, 0, 1, 0],\n    [1, 0, 0, 0, 1],\n    [0, 0, 1, 0, 0],\n];\nvar grid = new PF.Grid(5, 3, matrix);\n```\n\nCurrently there are 9 path-finders bundled in this library, namely:\n\n*  `AStarFinder` *\n*  `BreadthFirstFinder` *\n*  `BestFirstFinder`\n*  `DijkstraFinder` *\n*  `BiAStarFinder`\n*  `BiBestFirstFinder`\n*  `BiDijkstraFinder` *\n*  `BiBreadthFirstFinder` *\n*  `JumpPointFinder` *\n\nThe suffix `Bi` for the last four finders in the above list stands for the bi-directional searching strategy. \n\nAlso, Note that only the finders with trailing asterisks are guaranteed to find the shortest path.\n\nTo build a path-finder, say, the `AStarFinder`:\n\n```javascript\nvar finder = new PF.AStarFinder();\n```\n\nTo find a path from (1, 2) to (4, 2), (Note: both the start point and end point should be walkable):\n\n```javascript\nvar path = finder.findPath(1, 2, 4, 2, grid);\n```\n\n`path` will be an array of coordinates including both the start and end positions.\n\nFor the `matrix` defined previously, the `path` will be:\n\n```javascript\n[ [ 1, 2 ], [ 1, 1 ], [ 2, 1 ], [ 3, 1 ], [ 3, 2 ], [ 4, 2 ] ]\n```\n\nBe aware that `grid` will be modified in each path-finding, and will not be usable afterwards. If you want to use a single grid multiple times, create a clone for it before calling `findPath`.\n\n```javascript\nvar gridBackup = grid.clone();\n```\n\n\nAdvanced Usage\n--------------\n\nWhen instantiating path-finders, you may pass in additional parameters to indicate which specific strategies to use.\n\nFor all path-finders, you may indicate whether diagonal movement is allowed. The default value is `false`, which means that the path can only go orthogonally.\n\nIn order to enable diagonal movement:\n\n```javascript\nvar finder = new PF.AStarFinder({\n    allowDiagonal: true\n});\n```\n\nWhen diagonal movement is enabled, you might want to prevent the path from touching the corners of the occupied grid blocks. This is usually desirable if the objects using the path have physical width and can also move between the grid cells.\n\nTo enable the corner crossing prevention:\n\n```javascript\nvar finder = new PF.AStarFinder({\n    allowDiagonal: true,\n    dontCrossCorners: true\n});\n```\n\nNote that `dontCrossCorners` only makes sense when `allowDiagonal` is also used. Currently all algorithms except `JumpPointFinder` support this feature.\n\nFor `AStarFinder`, `BestFirstFinder` and all their `Bi` relatives, you may indicate which heuristic function to use.\n\nThe predefined heuristics are `PF.Heuristic.manhattan`(defalut), `PF.Heuristic.chebyshev` and `PF.Heuristic.euclidean`.\n\nTo use the chebyshev heuristic:\n\n```javascript\nvar finder = new PF.AStarFinder({\n    heuristic: PF.Heuristic.chebyshev\n});\n```\n\nTo build a `BestFirstFinder` with diagonal movement allowed and a custom heuristic function:\n\n```javascript\nvar finder = new PF.BestFirstFinder({\n    allowDiagonal: true,\n    heuristic: function(dx, dy) {\n        return Math.min(dx, dy);\n    }\n});\n```\n\nTo smoothen the path, you may use `PF.Util.smoothenPath`. This routine will return\na new path with the original one unmodified.\n\n```javascript\nvar newPath = PF.Util.smoothenPath(grid, path);\n```\n\nNote that the new path will be compressed as well, i.e. if the original path is\n`[[0, 1], [0, 2], [0, 3], [0, 4]]`, then the new path will be `[[0, 1], [0, 4]]`.\n\n\nDevelopement\n------------\n\nLayout:\n\n    .\n    |-- lib          # browser distribution\n    |-- src          # source code (algorithms only)\n    |-- test         # test scripts\n    |-- utils        # build scripts\n    `-- visual       # visualization\n\nYou will need to install `node.js` and use `npm` to install the dependencies: \n\n    npm install -d \n\nTo build the browser distribution \n(It will use [node-browserify](https://github.com/substack/node-browserify) to generate a browser distribution,\nand use [UglifyJS](https://github.com/mishoo/UglifyJS) to compress):\n\n    make\n\nTo run the tests\n(algorithms only, not including the visualization) with\n[mocha](http://visionmedia.github.com/mocha/) and [should.js](https://github.com/visionmedia/should.js) \n\n    make test\n\nLicense\n-------\n\n[MIT License](http://www.opensource.org/licenses/mit-license.php)\n\n&copy; 2011-2012 Xueqiao Xu &lt;xueqiaoxu@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/qiao/PathFinding.js/issues"
  },
  "_id": "pathfinding@0.4.2",
  "dist": {
    "shasum": "bd4514c4eb9657282976b4e8d711fa88ac83594c"
  },
  "_from": "pathfinding@",
  "_resolved": "https://registry.npmjs.org/pathfinding/-/pathfinding-0.4.2.tgz"
}
